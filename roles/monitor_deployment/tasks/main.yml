---
- name: Monitor OpenShift installation bootstrap process
  ansible.builtin.command:
    cmd: "openshift-install --dir {{ common_openshift_cluster_install_dir }} agent wait-for bootstrap-complete --log-level={{ log_level }}"
  register: bootstrap_output
  when: not common_fips_enabled

- name: Monitor OpenShift installation bootstrap process (FIPS MODE)
  ansible.builtin.command:
    cmd: "openshift-install-fips --dir {{ common_openshift_cluster_install_dir }} agent wait-for bootstrap-complete --log-level={{ log_level }}"
  register: bootstrap_output_fips
  when: common_fips_enabled

- name: Check status of cluster bootstrap
  debug:
    msg: "{{ bootstrap_output.stderr_lines[-1] }}"
  when: not common_fips_enabled and bootstrap_output.stderr is search(bootstrap_complete_text)

- name: Check status of cluster bootstrap (FIPS MODE)
  debug:
    msg: "{{ bootstrap_output.stderr_lines[-1] }}"
  when: common_fips_enabled and bootstrap_output_fips.stderr is search(bootstrap_complete_text)

- name: Monitor node health
  ansible.builtin.shell:
    cmd: "{{ oc_command_node_status}}"
  register: node_status
  retries: 120
  delay: 15
  until: node_status.stdout >= node_count
  when: bootstrap_output.stderr is search(bootstrap_complete_text)

- name: Node Status
  ansible.builtin.debug:
    msg: "Node ready count is: {{node_status.stdout}}"
  when: node_status.stdout >= node_count

- name: Monitor cluster operator status
  ansible.builtin.shell:
    cmd: 
      - if [ $(oc get co --no-headers | grep "{{ common_openshift_release }}" | wc -l) -eq 0 ]; then echo 'Bad output for oc get co'; fi
      - if [ $(oc get co --no-headers | grep "{{ common_openshift_release }}" | awk '$3 != "True" || $4 == "True" || $5 == "True"' | wc -l) -eq 0 ]; then echo 'Bad output for oc get co'; fi
  register: co_status
  retries: 120
  delay: 15
  until: '"Bad" not in co_status.stdout'
  when: bootstrap_output.stderr is search(bootstrap_complete_text)
  # with_items: "{{ oc_command_co_status }}"

- name: Cluster Operator Status
  ansible.builtin.debug:
    msg: 
      - "Cluster operators in appropriate state"
      - "{{ co_status }}"
  when: item.stdout == "0"
  # with_items: "{{ co_status.results }}"