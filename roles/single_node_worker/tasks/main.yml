---
- name: Set fact for {{ ip_space }} IPv4 address
  set_fact:
    ipv4_address: "{{ ansible_all_ipv4_addresses | select('match', '^' + ip_space + '\\.') | list }}"
  when: ipv4_address is undefined

- name: Create cluster install dir
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0755'
    state: directory
  with_items:
    - "{{ openshift_worker_dir }}"

- name: Get the RHCOS image name
  ansible.builtin.find:
    paths: "{{ ansible_user_dir }}/.cache/agent/image_cache"
    patterns: "*.iso"
  register: iso_files

- name: Generate worker configuration files
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ openshift_worker_dir }}/{{ item }}"
    mode: '0644'
  with_items:
    - custom-config.nmconnection
    - init-worker.ign

- name: pull worker ignition file from master
  shell: |
     oc --kubeconfig {{ openshift_cluster_install_dir }}/auth/kubeconfig extract -n openshift-machine-api secret/worker-user-data --keys=userData --to=-  > {{ openshift_worker_dir }}/worker.ign

- name: Merge pulled ignition with one pulled from master
  ansible.builtin.shell: |
    python3 -c "
    import json

    # Load two Ignition files
    with open('init-worker.ign') as f1, open('worker.ign') as f2:
        ignition1 = json.load(f1)
        ignition2 = json.load(f2)

    # Merge Ignition JSON objects
    def merge_ignition(ign1, ign2):
        merged = ign1
        for key in ign2:
            if key in merged:
                # Append lists like files, systemd units
                if isinstance(merged[key], list):
                    merged[key].extend(ign2[key])
                # Recursively merge dictionaries
                elif isinstance(merged[key], dict):
                    merged[key] = merge_ignition(merged[key], ign2[key])
            else:
                merged[key] = ign2[key]
        return merged

    merged_ignition = merge_ignition(ignition1, ignition2)

    # Write the merged Ignition file
    with open('merged-worker.ign', 'w') as f:
        json.dump(merged_ignition, f, indent=4)
    "
  args:
    chdir: "{{ openshift_worker_dir }}"

- name: Remove any previous iso generated
  ansible.builtin.file:
    path: "{{ openshift_worker_iso }}"
    state: absent

- name: Run coreos-installer iso customize
  command:
    cmd: coreos-installer iso customize --network-keyfile {{ openshift_worker_dir }}/custom-config.nmconnection --dest-ignition {{ openshift_worker_dir}}/merged-worker.ign --dest-device /dev/{{ disk_type }} {{ iso_files.files[0].path }} -o {{ openshift_worker_iso }} 
 
- name: next steps
  debug: 
    msg: mount the iso "{{ openshift_worker_iso }}" on idrac, and it will fully install and approve

- name: Pause for 3 minutes to allow time to mount iso
  ansible.builtin.pause:
    minutes: 3

- name: Auto approve the worker node certificate signing request (CSR) when its up
  shell: |
    CSR=0
    I=0
    while [[ $CSR -ne 3 ]]; do
      I=$((I+1))
      CERT=$(oc --kubeconfig {{ openshift_cluster_install_dir }}/auth/kubeconfig get csr -o go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}' 2>/dev/null)
      if [[ -n $CERT ]]; then
        oc --kubeconfig {{ openshift_cluster_install_dir }}/auth/kubeconfig adm certificate approve $CERT
        CSR=$((CSR+1))
        unset $CERT
      else
        echo "no certs detected on Iteration $I"
      fi
      sleep 30s
    done
