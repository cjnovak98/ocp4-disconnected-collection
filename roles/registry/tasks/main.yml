- name: "Create Directories"
  ansible.builtin.file:
    mode: '0774'
    path: '{{ item }}'
    state: directory
    owner: "{{ ansible_user_id }}"
    group: wheel
  with_items:
      - "{{ ansible_user_dir }}/.docker/"
      - "{{ registry_volume }}/data"
      - "{{ registry_volume }}/auth"
      - "{{ registry_volume }}/certs"
      - "{{ ansible_user_dir }}/.config/systemd/user"
  become: true

- name: Set fact for {{ ip_space }} IPv4 address
  set_fact:
    ipv4_address: "{{ ansible_all_ipv4_addresses | select('match', '^' + ip_space + '\\.') | list }}"
  when: ipv4_address is undefined

- name: "Generate Registry Basic Auth" ## community.general.htpasswd (requires passlib>=1.6)
  ansible.builtin.command:
    cmd: htpasswd -Bbn {{ registry_username }} {{ registry_password }}
  register: bcrypt_htpasswd

- name: "Write Registry htpasswd credential config"
  ansible.builtin.copy:
    content: '{{ bcrypt_htpasswd.stdout }}'
    dest: '{{ registry_volume }}/auth/htpasswd'
    mode: 0760

- name: "Generate encrypted password"
  ansible.builtin.shell:
    cmd: "echo {{ registry_username }}:{{ registry_password }} | base64 -w0"
  register: docker_pass

- block:
  - name: Check if domain.key exists
    ansible.builtin.stat:
      path: "{{ registry_volume }}/certs/domain.key"
    register: key_file

  - name: Check if domain.crt exists
    ansible.builtin.stat:
      path: "{{ registry_volume }}/certs/domain.crt"
    register: crt_file

  - name: "Generate certs"
    ansible.builtin.shell:
      cmd: openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt -addext "subjectAltName = DNS:{{ ansible_fqdn }},DNS:{{ ansible_hostname }},DNS:localhost,IP:{{ ipv4_address | first }}" -subj "/C={{ cert_c }}/ST={{ cert_s }}/L={{ cert_l }}/O={{ cert_o }}/OU={{ cert_ou }}/CN={{ ansible_fqdn }}"
    args:
      chdir: "{{ registry_volume }}/certs"
    when:
      - not key_file.stat.exists
      - not crt_file.stat.exists

  - name: "Set permission on generated certs"
    ansible.builtin.file:
      path: "{{ registry_volume }}/certs/domain.{{ item }}"
      state: file
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_id }}"
      mode: "0755"
    with_items: 
      - crt
      - key
    become: true
    when:
      - not key_file.stat.exists
      - not crt_file.stat.exists

- containers.podman.podman_load:
    input: "{{ openshift_oc_mirror_dir }}/registry.tar"



- name: Generate systemd file for sushy-emulator
  containers.podman.podman_container:
    name: "{{ registry_pod_name }}"
    privileged: false
    image: docker.io/library/registry:latest
    state: present
    ports: "{{ registry_port }}:5000"
    command: "sushy-emulator -i :: -p 8000 --config /etc/sushy/sushy-emulator.conf"
    volume: 
      - "{{ registry_volume }}/data:/var/lib/registry"
      - "{{ registry_volume }}/auth:/auth"
      - "{{ registry_volume }}/certs:/certs"
    env:
      REGISTRY_AUTH: "htpasswd"
      REGISTRY_AUTH_HTPASSWD_REALM: "Registry"
      REGISTRY_AUTH_HTPASSWD_PATH: "/auth/htpasswd"
      REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/domain.crt"
      REGISTRY_HTTP_TLS_KEY: "/certs/domain.key"
      REGISTRY_COMPATIBILITY_SCHEMA1_ENABLED: "true"
    generate_systemd:
      path: /etc/systemd/system/
      names: true
      time: 1


- name: Ensure firewalld is configured for external redfish access over port 8000
  firewalld:
    port: 5000/tcp
    immediate: true
    permanent: true
    state: enabled

- name: "Login to registry"
  ansible.builtin.command:
    cmd: podman login https://{{ ipv4_address | first  }}:{{ registry_port }} --username {{ registry_username }} --password {{ registry_password }} --tls-verify=false
  register: registry_logedin
  retries: 5
  delay: 2
  until: registry_logedin.rc == 0
  
- name: "copy /run/user/1000/containers/auth.json to {{ ansible_user_dir }}/.docker/config.json"
  ansible.builtin.copy:
    src: /run/user/1000/containers/auth.json
    dest: "{{ ansible_user_dir }}/.docker/config.json"
