- name: "Create Directories"
  ansible.builtin.file:
    mode: '0774'
    path: '{{ item }}'
    state: directory
    owner: "{{ ansible_user_id }}"
    group: wheel
  with_items:
      - "{{ ansible_user_dir }}/.docker/"
      - "{{ registry_volume }}/data"
      - "{{ registry_volume }}/auth"
      - "{{ registry_volume }}/certs"
      - "{{ ansible_user_dir }}/.config/systemd/user"
  become: true

- name: "Import Regstry Image"
  ansible.builtin.command:
    cmd: podman load -i {{ openshift_oc_mirror_dir }}/registry.tar

- name: "Generate Registry Basic Auth"
  ansible.builtin.command:
    cmd: htpasswd -Bbn {{ registry_username }} {{ registry_password }}
  register: bcrypt_htpasswd

- name: "Write Registry htpasswd credential config"
  ansible.builtin.copy:
    content: '{{ bcrypt_htpasswd.stdout }}'
    dest: '{{ registry_volume }}/auth/htpasswd'
    mode: 0760

- name: "Generate encrypted password"
  ansible.builtin.shell:
    cmd: "echo {{ registry_username }}:{{ registry_password }} | base64 -w0"
  register: docker_pass

- name: "Generate certs"
  ansible.builtin.shell:
    cmd: "bash generateCert.sh {{ ansible_hostname }}.{{ cluster_name }}.{{ cluster_domain }} {{ ansible_fqdn }}"
  args:
    chdir: "{{ role_path }}/files/"

- name: "Set permission on generated certs"
  ansible.builtin.file:
    path: "{{ role_path }}/files/domain.{{ item }}"
    state: file
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: "0755"
  with_items: 
    - crt
    - key
  become: true

- name: "Copy over generated certs"
  ansible.builtin.copy:
    src: "{{ role_path }}/files/domain.{{ item }}"
    dest: "{{ registry_volume }}/certs"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: "0755"
  with_items: 
    - crt
    - key
  become: true

- name: "Create Registry Container"
  ansible.builtin.command:
    cmd: podman create --name {{ registry_pod_name }} -p {{ registry_port }}:5000 -e "REGISTRY_AUTH=htpasswd" -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry" -e "REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd" -e "REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt" -e "REGISTRY_HTTP_TLS_KEY=/certs/domain.key" -e "REGISTRY_COMPATIBILITY_SCHEMA1_ENABLED=true" -v {{ registry_volume }}/data:/var/lib/registry:z -v {{ registry_volume }}/auth:/auth:z -v {{ registry_volume }}/certs:/certs:z docker.io/library/registry:latest
  register: container_created

- name: "Create Registry Container Service"
  ansible.builtin.command:
    cmd: podman generate systemd --name {{ registry_pod_name }} --files
  args:
    chdir: "{{ ansible_user_dir }}/.config/systemd/user"

- name: "Enable Linger | Allows Service to Start without user logging in"
  ansible.builtin.command:
    cmd: loginctl enable-linger "{{ ansible_user_id }}"
  become: true

- name: "Reload users systemd"
  ansible.builtin.systemd:
    daemon_reload: yes
    scope: user

- name: "Start and Enable Registry Service"
  ansible.builtin.systemd:
    name: "container-{{ registry_pod_name }}.service"
    state: started
    enabled: yes
    scope: user

- name: "Open port {{ registry_port }} on the firewall permanently"
  ansible.builtin.firewalld: 
    port: "{{ registry_port }}/tcp"
    permanent: yes
    immediate: yes
    state: enabled
  become: true

- name: "Login to registry"
  ansible.builtin.command:
     cmd: podman login https://{{ ansible_nodename }}:{{ registry_port }} --username {{ registry_username }} --password {{ registry_password }} --tls-verify=false
  register: registry_logedin
  retries: 5
  delay: 2
  until: registry_logedin.rc == 0 

- name: "copy /run/user/1000/containers/auth.json to {{ ansible_user_dir }}/.docker/config.json"
  ansible.builtin.copy:
    src: /run/user/1000/containers/auth.json
    dest: "{{ ansible_user_dir }}/.docker/config.json"